diff -Nur -x '*.orig' -x '*.rej' e-smith-base-4.15.8/root/sbin/e-smith/console-menu-items/manageRAID.pl mezzanine_patched_e-smith-base-4.15.8/root/sbin/e-smith/console-menu-items/manageRAID.pl
--- e-smith-base-4.15.8/root/sbin/e-smith/console-menu-items/manageRAID.pl	1970-01-01 10:00:00.000000000 +1000
+++ mezzanine_patched_e-smith-base-4.15.8/root/sbin/e-smith/console-menu-items/manageRAID.pl	2005-12-07 06:38:04.303515919 +1100
@@ -0,0 +1,236 @@
+package esmith::console::manageDiskRedundancy;
+
+use esmith::console;
+use Locale::gettext;
+
+sub new
+{
+    my $class = shift;
+    my $self = {
+		    name => "Manage disk redundancy",
+		    order => 45,
+		};
+    bless $self, $class;
+    return $self;
+}
+
+sub name
+{
+    return $_[0]->{name};
+}
+
+sub order
+{
+    return $_[0]->{order};
+}
+
+sub doit
+{
+    my $console = new esmith::console;
+
+    use POSIX qw(strftime);
+    my $today = strftime "%A %B %e, %Y %H:%M:%S", localtime;
+    my $title = gettext("Disk redundancy status as of") . " " . $today,
+    my $text = gettext("Current RAID status:") . "\n\n" . 
+        join("", get_raid_status()) . "\n\n";
+
+    my %devices = get_raid_details();
+
+    unless (scalar %devices)
+    {
+        $text = gettext("There are no RAID devices configured");
+        my ($rc, $choice) = $console->message_page(title => $title, text => $text);
+        return;
+    }
+
+    unless (scalar keys %devices == 2)
+    {
+        $text .= gettext("There should be two RAID devices, not ") . 
+                    scalar keys %devices;
+        my ($rc, $choice) = $console->message_page(title => $title, text => $text);
+        return;
+    }
+
+    for my $dev (keys %devices)
+    {
+        unless ($devices{$dev}{RaidLevel} eq "raid1")
+        {
+            $text .= gettext("One or more devices is not RAID1") . "\n\n" .
+                gettext("Manual intervention is required.") . "\n\n";
+            my ($rc, $choice) = $console->message_page(title => $title, 
+                            text => $text);
+            return;
+        }
+    }
+
+    my @unclean = ();
+    my %used_disks = ();
+
+    for my $dev (keys %devices)
+    {
+        my $disk = $devices{$dev}{0};
+        $disk =~ s/\d+//;
+        $used_disks{$disk}++;
+
+        next if ($devices{$dev}{State} =~ /clean/);
+
+        push @unclean, "$dev => " . $devices{$dev}{State};
+    }
+
+    unless (scalar @unclean)
+    {
+        $text .= gettext("All RAID devices are in clean state");
+        my ($rc, $choice) = $console->message_page(title => $title, text => $text);
+        return;
+    }
+
+    unless (scalar @unclean == scalar keys %devices)
+    {
+        $text .= gettext("Only some of the RAID devices are unclean.") . " " .
+                gettext("Manual intervention is required.") . "\n\n";
+
+        my ($rc, $choice) = $console->message_page(title => $title, text => $text);
+        return;
+    }
+
+    my %free_disks = map {$_ => 1} get_disks();
+    delete $free_disks{$_} for keys %used_disks;
+
+    my $disk_status = gettext("Current disk status:") . "\n\n";
+    $disk_status .= gettext("Installed disks") . ": " . 
+                    join(" ", get_disks()) . "\n";
+    $disk_status .= gettext("Used disks") . ": " . 
+                    join(" ", keys %used_disks) . "\n";
+    $disk_status .= gettext("Free disks") . ": " . 
+                    join(" ", keys %free_disks) . "\n";
+
+    unless (scalar keys %used_disks == 1 and 
+            scalar keys %free_disks == scalar keys %used_disks)
+    {
+        $text .= gettext("The free and used disk count must equal one.") .
+                "\n\n" .
+                gettext("Manual intervention is required.") . "\n\n" .
+                $disk_status;
+
+        my ($rc, $choice) = $console->message_page(title => $title, text => $text);
+        return;
+    }
+
+    my @cmd = ("/sbin/e-smith/add_mirror", "-f", join("", keys %used_disks), 
+              join(" ", keys %free_disks));
+
+    $text = $disk_status . 
+        "\n\n" . 
+        gettext("Do you wish to run the following command?") . 
+        "\n\n" .
+        "@cmd";
+
+    my ($rc, $choice) = $console->yesno_page(title => $title, text => $text);
+    return unless ($rc == 0);
+
+    unless (system(@cmd) == 0)
+    {
+        $text = gettext("The command @cmd failed.") .
+                "\n\n" .
+                gettext("Manual intervention is required.");
+
+        my ($rc, $choice) = $console->message_page(title => $title, text => $text);
+        return;
+    }
+
+}
+
+sub get_raid_status
+{
+    die "Couldn't open /proc/mdstat:$!\n"
+        unless (open(MDSTAT, "/proc/mdstat"));
+
+    my @mdstat;
+
+    while (<MDSTAT>)
+    {
+	push @mdstat, "$1\n" if (/(.*)/);
+    }
+    close MDSTAT;
+    return @mdstat;
+}
+
+sub get_raid_details
+{
+    my @devices = ();
+
+    die "Couldn't call mdadm: $!\n"
+        unless open(MDADM, "/sbin/mdadm --detail --scan|");
+   
+    while (<MDADM>)
+    {
+        push @devices, $1 if ( m:ARRAY (/dev/md\d+): ) 
+    }
+    close MDADM;
+
+    my %devices;
+
+    for my $dev (@devices)
+    {
+        die "Couldn't call mdadm --detail $dev: $!\n" 
+            unless open(MDADM, "/sbin/mdadm --detail $dev|");
+
+        while ( <MDADM> )
+        {
+            if ( /\s*(.*)\s+:\s+(.*)\s*/ )
+            {
+                my ($key, $value) = ($1, $2);
+                $key =~ s/\s//g;
+                $devices{$dev}{$key} = $value;
+            }
+
+            if ( m:\s+(\d+)\s+(\d+)\s+(\d+)\s+(\d+)\s+(.*)/dev/(\w+): )
+            {
+                $devices{$dev}{$1} = $6;
+            }
+        }
+        close MDADM;
+    }
+
+    return %devices;
+}
+
+sub get_partitions
+{
+    die "Couldn't read /proc/partitions: $!\n" 
+        unless open (PARTITIONS, "/proc/partitions");
+
+    my %parts;
+
+    while (<PARTITIONS>)
+    {
+        if ( /\s+(\d+)\s+(\d+)\s+(\d+)\s+(\w+)\s+/ )
+        {
+            my $name = $4;
+
+            $parts{$name}{major} = $1;
+            $parts{$name}{minor} = $2;
+            $parts{$name}{blocks} = $3;
+        }
+    }
+    close PARTITIONS;
+
+    return %parts;
+}
+
+sub get_disks
+{
+    my %parts = get_partitions();
+
+    my @disks;
+
+    for (keys %parts)
+    {
+        push @disks, $_ if ($parts{$_}{minor} == 0);
+    }
+
+    return @disks;
+}
+
+$screen = new esmith::console::manageDiskRedundancy;
+# $screen->doit;
diff -Nur -x '*.orig' -x '*.rej' e-smith-base-4.15.8/root/sbin/e-smith/manageRAID.pl mezzanine_patched_e-smith-base-4.15.8/root/sbin/e-smith/manageRAID.pl
--- e-smith-base-4.15.8/root/sbin/e-smith/manageRAID.pl	2005-12-07 06:38:33.614416152 +1100
+++ mezzanine_patched_e-smith-base-4.15.8/root/sbin/e-smith/manageRAID.pl	1970-01-01 10:00:00.000000000 +1000
@@ -1,231 +0,0 @@
-package esmith::console::manageDiskRedundancy;
-
-use esmith::console;
-use Locale::gettext;
-
-sub new
-{
-    my $class = shift;
-    my $self = {
-		    name => "Manage disk redundancy",
-		    order => 45,
-		};
-    bless $self, $class;
-    return $self;
-}
-
-sub name
-{
-    return $_[0]->{name};
-}
-
-sub order
-{
-    return $_[0]->{order};
-}
-
-sub doit
-{
-    my $console = new esmith::console;
-
-    use POSIX qw(strftime);
-    my $today = strftime "%A %B %e, %Y %H:%M:%S", localtime;
-    my $title = gettext("Disk redundancy status as of") . " " . $today,
-    my $text = gettext("Current RAID status:") . "\n\n" . 
-        join("", get_raid_status()) . "\n\n";
-
-    my %devices = get_raid_details();
-
-    unless (scalar %devices)
-    {
-        $text = gettext("There are no RAID devices configured");
-        my ($rc, $choice) = $console->message_page(title => $title, text => $text);
-        return;
-    }
-
-    unless (scalar keys %devices == 2)
-    {
-        $text .= gettext("There should be two RAID devices, not ") . 
-                    scalar keys %devices;
-        my ($rc, $choice) = $console->message_page(title => $title, text => $text);
-        return;
-    }
-
-    for my $dev (keys %devices)
-    {
-        unless ($devices{$dev}{RaidLevel} eq "raid1")
-        {
-            $text .= gettext("One or more devices is not RAID1") . "\n\n" .
-                gettext("Manual intervention is required.") . "\n\n";
-            my ($rc, $choice) = $console->message_page(title => $title, 
-                            text => $text);
-            return;
-        }
-    }
-
-    my @unclean = ();
-    my %used_disks = ();
-
-    for my $dev (keys %devices)
-    {
-        my $disk = $devices{$dev}{0};
-        $disk =~ s/\d+//;
-        $used_disks{$disk}++;
-
-        next if ($devices{$dev}{State} =~ /clean/);
-
-        push @unclean, "$dev => " . $devices{$dev}{State};
-    }
-
-    unless (scalar @unclean)
-    {
-        $text .= gettext("All RAID devices are in clean state");
-        my ($rc, $choice) = $console->message_page(title => $title, text => $text);
-        return;
-    }
-
-    unless (scalar @unclean == scalar keys %devices)
-    {
-        $text .= gettext("Only some of the RAID devices are unclean.") . " " .
-                gettext("Manual intervention is required.") . "\n\n";
-
-        my ($rc, $choice) = $console->message_page(title => $title, text => $text);
-        return;
-    }
-
-    my %free_disks = map {$_ => 1} get_disks();
-    delete $free_disks{$_} for keys %used_disks;
-
-    my $disk_status = gettext("Current disk status:") . "\n\n";
-    $disk_status .= gettext("Installed disks") . ": " . 
-                    join(" ", get_disks()) . "\n";
-    $disk_status .= gettext("Used disks") . ": " . 
-                    join(" ", keys %used_disks) . "\n";
-    $disk_status .= gettext("Free disks") . ": " . 
-                    join(" ", keys %free_disks) . "\n";
-
-    unless (scalar keys %used_disks == 1 and 
-            scalar keys %free_disks == scalar keys %used_disks)
-    {
-        $text .= gettext("The free and used disk count must equal one.") .
-                "\n\n" .
-                gettext("Manual intervention is required.") . "\n\n" .
-                $disk_status;
-
-        my ($rc, $choice) = $console->message_page(title => $title, text => $text);
-        return;
-    }
-
-    my @cmd = ("/sbin/e-smith/add_mirror", "-f", join("", keys %used_disks), 
-              join(" ", keys %free_disks));
-
-    $text = $disk_status . 
-        "\n\n" . 
-        gettext("Do you wish to run the following command?") . 
-        "\n\n" .
-        "@cmd";
-
-    my ($rc, $choice) = $console->yesno_page(title => $title, text => $text);
-    return unless ($rc == 0);
-
-    unless (system(@cmd) == 0)
-    {
-        $text = gettext("The command @cmd failed.") .
-                "\n\n" .
-                gettext("Manual intervention is required.");
-
-        my ($rc, $choice) = $console->message_page(title => $title, text => $text);
-        return;
-    }
-
-}
-
-sub get_raid_status
-{
-    die "Couldn't open /proc/mdstat:$!\n"
-        unless (open(MDSTAT, "/proc/mdstat"));
-
-    my @mdstat = <MDSTAT>;
-    close MDSTAT;
-    return @mdstat;
-}
-
-sub get_raid_details
-{
-    my @devices = ();
-
-    die "Couldn't call mdadm: $!\n"
-        unless open(MDADM, "/sbin/mdadm --detail --scan|");
-   
-    while (<MDADM>)
-    {
-        push @devices, $1 if ( m:ARRAY (/dev/md\d+): ) 
-    }
-    close MDADM;
-
-    my %devices;
-
-    for my $dev (@devices)
-    {
-        die "Couldn't call mdadm --detail $dev: $!\n" 
-            unless open(MDADM, "/sbin/mdadm --detail $dev|");
-
-        while ( <MDADM> )
-        {
-            if ( /\s*(.*)\s+:\s+(.*)\s*/ )
-            {
-                my ($key, $value) = ($1, $2);
-                $key =~ s/\s//g;
-                $devices{$dev}{$key} = $value;
-            }
-
-            if ( m:\s+(\d+)\s+(\d+)\s+(\d+)\s+(\d+)\s+(.*)/dev/(\w+): )
-            {
-                $devices{$dev}{$1} = $6;
-            }
-        }
-        close MDADM;
-    }
-
-    return %devices;
-}
-
-sub get_partitions
-{
-    die "Couldn't read /proc/partitions: $!\n" 
-        unless open (PARTITIONS, "/proc/partitions");
-
-    my %parts;
-
-    while (<PARTITIONS>)
-    {
-        if ( /\s+(\d+)\s+(\d+)\s+(\d+)\s+(\w+)\s+/ )
-        {
-            my $name = $4;
-
-            $parts{$name}{major} = $1;
-            $parts{$name}{minor} = $2;
-            $parts{$name}{blocks} = $3;
-        }
-    }
-    close PARTITIONS;
-
-    return %parts;
-}
-
-sub get_disks
-{
-    my %parts = get_partitions();
-
-    my @disks;
-
-    for (keys %parts)
-    {
-        push @disks, $_ if ($parts{$_}{minor} == 0);
-    }
-
-    return @disks;
-}
-
-$screen = new esmith::console::manageDiskRedundancy;
-$screen->doit;
